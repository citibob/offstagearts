/*
OffstageArts: Enterprise Database for Arts Organizations
This file Copyright (c) 2005-2008 by Robert Fischer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * IntRangePanel.java
 *
 * Created on April 12, 2008, 6:26 PM
 */

package offstage.equery.swing;

import citibob.swing.typed.JTypedPanel;
import citibob.text.IntegerSFormat;
import citibob.text.SFormat;
import citibob.types.JEnumMulti;
import java.util.List;
import offstage.equery.swing.IntRange;

/**
 *
 * @author  citibob
 */
public class IntRangeTW extends JTypedPanel
{

/** Creates new form IntRangePanel */
public IntRangeTW() {
	initComponents();
	SFormat ifmt = new IntegerSFormat("#","");
	tfMin.setJType(Integer.class, ifmt);
	tfMax.setJType(Integer.class, ifmt);
}

	
/** Returns last legal value of the widget.  Same as method in JFormattedTextField */
public Object getValue() {
	IntRange lar = new IntRange();
		lar.min = (Integer)tfMin.getValue();
		lar.max = (Integer)tfMax.getValue();
	return lar;
}

/** Sets the value.  Same as method in JFormattedTextField.  Fires a
 * propertyChangeEvent("value") when calling setValue() changes the value. */
public void setValue(Object o) {
	IntRange lar = (IntRange)o;
	if (lar == null) {
		tfMin.setValue(null);
		tfMax.setValue(null);
	} else {
		tfMin.setValue(lar.min);
		tfMax.setValue(lar.max);
	}
}

/** From TableCellEditor (in case this is being used in a TableCellEditor):
 * Tells the editor to stop editing and accept any partially edited value
 * as the value of the editor. The editor returns false if editing was not
 * stopped; this is useful for editors that validate and can not accept
 * invalid entries. */
public boolean stopEditing() {
	boolean ret = true;
	ret = ret && tfMin.stopEditing();
	ret = ret && tfMax.stopEditing();
	return ret;
}

/** Is this object an instance of the class available for this widget?
 * If so, then setValue() will work.  See SqlType.. */
public boolean isInstance(Object o)
	{return o instanceof IntRange; }

///** Set up widget to edit a specific SqlType.  Note that this widget does not
// have to be able to edit ALL SqlTypes... it can throw a ClassCastException
// if asked to edit a SqlType it doesn't like. */
//public void setJType(citibob.swing.typed.Swinger f) throws ClassCastException
//{ getSubWidget().setJType(f); }


/** Row (if any) in a RowModel we will bind this to at runtime. */
public String getColName() { return tfMin.getColName(); }

/** Row (if any) in a RowModel we will bind this to at runtime. */
public void setColName(String col) { tfMax.setColName(col); }


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tfMin = new citibob.swing.typed.JTypedTextField();
        tfMax = new citibob.swing.typed.JTypedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        tfMin.setText("jTypedTextField1");
        tfMin.setMinimumSize(new java.awt.Dimension(30, 22));
        tfMin.setPreferredSize(new java.awt.Dimension(30, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(tfMin, gridBagConstraints);

        tfMax.setText("jTypedTextField1");
        tfMax.setMinimumSize(new java.awt.Dimension(30, 22));
        tfMax.setPreferredSize(new java.awt.Dimension(30, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(tfMax, gridBagConstraints);

        jLabel1.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Range:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private citibob.swing.typed.JTypedTextField tfMax;
    private citibob.swing.typed.JTypedTextField tfMin;
    // End of variables declaration//GEN-END:variables
	
}
