/*
OffstageArts: Enterprise Database for Arts Organizations
This file Copyright (c) 2005-2008 by Robert Fischer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * SchoolFrame.java
 *
 * Created on December 9, 2007, 4:45 PM
 */

package offstage.school.gui;

import citibob.task.SqlTask;
import citibob.reports.Reports;
import citibob.sql.DbKeyedModel;
import citibob.sql.RsTasklet2;
import citibob.sql.SqlRun;
import citibob.sql.UpdTasklet2;
import citibob.sql.pgsql.SqlInteger;
import citibob.swing.table.JTypeTableModel;
import citibob.util.Day;
import citibob.wizard.Wizard;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.util.Calendar;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import offstage.reports.AcctStatement;
import offstage.reports.LabelReport;
import offstage.reports.RollBook;
import offstage.reports.SchoolAccounts;
import offstage.reports.StudentConfirmationLetter;
import offstage.*;
import offstage.email.VettEmail;
import offstage.equery.EQuery;
import offstage.equery.swing.EQueryWizard;
import offstage.reports.StudentSchedule;
import offstage.schema.TermidsSchema;
import offstage.school.tuition.TuitionCalc;

/**
 *
 * @author  citibob
 */
public class SchoolRegFrame extends javax.swing.JFrame
{

FrontApp fapp;
SchoolModel schoolModel;

/** Creates new form SchoolFrame */
public SchoolRegFrame()
{
	initComponents();
//	tabs.setSelectedComponent(regPanel);
}

public void initRuntime(SqlRun str, FrontApp xfapp)
//throws SQLException
{
	this.fapp = xfapp;

	this.schoolModel = new SchoolModel(str, fapp);
//str.flush();

	this.courseListPanel.initRuntime(fapp, schoolModel, str);
	teacherPanel1.initRuntime(str, fapp, schoolModel);

	// Set up terms selector
	final DbKeyedModel tkmodel = ((TermidsSchema)fapp.getSchema("termids")).currentTermsKmodel;
	str.execUpdate(new UpdTasklet2() {
	public void run(SqlRun str) throws Exception {
		vTermID.addPropertyChangeListener("value", new PropertyChangeListener() {
		public void propertyChange(PropertyChangeEvent evt) {
			fapp.sqlRun().pushFlush();
			schoolModel.setTermID((Integer)(vTermID.getValue()));
			fapp.sqlRun().popFlush();		// Flush, conditional on no other items around us.
		}});
		vTermID.setKeyedModel(tkmodel, null);
	}});

str.flush();
	regPanel.initRuntime(str, fapp, schoolModel);
	
	pack();
}

//int getTermID()
//{
//	Integer Termid = (Integer)vTermID.getValue();
//	return (Termid == null ? -1 : Termid);
//}



/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        vTermID = new citibob.swing.typed.JKeyedComboBox();
        jLabel3 = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        teacherPanel1 = new offstage.openclass.TeacherPanel();
        regPanel = new offstage.school.gui.RegistrationPanel();
        courseListPanel = new offstage.school.gui.CourseListPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mActions = new javax.swing.JMenu();
        miRecalcAllTuition = new javax.swing.JMenuItem();
        miApplyLateFees = new javax.swing.JMenuItem();
        miSchoolEmail = new javax.swing.JMenuItem();
        miRefresh = new javax.swing.JMenuItem();
        mStudent = new javax.swing.JMenu();
        miConfirmationLetter = new javax.swing.JMenuItem();
        miSchedule = new javax.swing.JMenuItem();
        miAccountStatement = new javax.swing.JMenuItem();
        mReports = new javax.swing.JMenu();
        miConfirmationLetters = new javax.swing.JMenuItem();
        miStudentSchedules = new javax.swing.JMenuItem();
        miAccountStatements = new javax.swing.JMenuItem();
        miPayerLabels = new javax.swing.JMenuItem();
        miRollBooks = new javax.swing.JMenuItem();
        miTermSpreadsheet = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        miStudentAccounts = new javax.swing.JMenuItem();
        mWindow = new javax.swing.JMenu();
        mHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("School Registration");

        vTermID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        vTermID.setPreferredSize(new java.awt.Dimension(68, 19));

        jLabel3.setText("Term: ");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel3)
                .add(3, 3, 3)
                .add(vTermID, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLabel3)
            .add(vTermID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        tabs.addTab("Teachers", teacherPanel1);
        tabs.addTab("Students", regPanel);
        tabs.addTab("Enrollments", courseListPanel);

        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);

        mActions.setText("Actions");

        miRecalcAllTuition.setText("Recalc All Tuition");
        miRecalcAllTuition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRecalcAllTuitionActionPerformed(evt);
            }
        });
        mActions.add(miRecalcAllTuition);

        miApplyLateFees.setText("Apply Late Fees");
        miApplyLateFees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miApplyLateFeesActionPerformed(evt);
            }
        });
        mActions.add(miApplyLateFees);

        miSchoolEmail.setText("School Email");
        miSchoolEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSchoolEmailActionPerformed(evt);
            }
        });
        mActions.add(miSchoolEmail);

        miRefresh.setText("Refresh");
        miRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRefreshActionPerformed(evt);
            }
        });
        mActions.add(miRefresh);

        jMenuBar1.add(mActions);

        mStudent.setText("Student");

        miConfirmationLetter.setText("Confirmation Letter");
        miConfirmationLetter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConfirmationLetterActionPerformed(evt);
            }
        });
        mStudent.add(miConfirmationLetter);

        miSchedule.setText("Schedule");
        miSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miScheduleActionPerformed(evt);
            }
        });
        mStudent.add(miSchedule);

        miAccountStatement.setText("Account Statement");
        miAccountStatement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAccountStatementActionPerformed(evt);
            }
        });
        mStudent.add(miAccountStatement);

        jMenuBar1.add(mStudent);

        mReports.setText("Reports");

        miConfirmationLetters.setText("Confirmation Letters");
        miConfirmationLetters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConfirmationLettersActionPerformed(evt);
            }
        });
        mReports.add(miConfirmationLetters);

        miStudentSchedules.setText("Student Schedules");
        miStudentSchedules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStudentSchedulesActionPerformed(evt);
            }
        });
        mReports.add(miStudentSchedules);

        miAccountStatements.setText("Acct Statements & Labels");
        miAccountStatements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAccountStatementsActionPerformed(evt);
            }
        });
        mReports.add(miAccountStatements);

        miPayerLabels.setText("Parent/Payer Lables");
        miPayerLabels.setEnabled(false);
        miPayerLabels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPayerLabelsActionPerformed(evt);
            }
        });
        mReports.add(miPayerLabels);

        miRollBooks.setText("Roll Books");
        miRollBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRollBooksActionPerformed(evt);
            }
        });
        mReports.add(miRollBooks);

        miTermSpreadsheet.setText("Term Spreadsheet");
        miTermSpreadsheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTermSpreadsheetActionPerformed(evt);
            }
        });
        mReports.add(miTermSpreadsheet);
        mReports.add(jSeparator1);

        miStudentAccounts.setText("School Accounts Summary");
        miStudentAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStudentAccountsActionPerformed(evt);
            }
        });
        mReports.add(miStudentAccounts);

        jMenuBar1.add(mReports);

        mWindow.setText("Window");
        jMenuBar1.add(mWindow);

        mHelp.setText("Help");
        jMenuBar1.add(mHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void miRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRefreshActionPerformed
	{//GEN-HEADEREND:event_miRefreshActionPerformed
// TODO: This is just here for testing.
vTermID.setKeyedModel(vTermID.getKeyedModel(), null);
// TODO add your handling code here:
	}//GEN-LAST:event_miRefreshActionPerformed

	private void miApplyLateFeesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miApplyLateFeesActionPerformed
	{//GEN-HEADEREND:event_miApplyLateFeesActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			final LateFeesWizard wizard = new LateFeesWizard(fapp, SchoolRegFrame.this);
			if (!wizard.runWizard("latefees")) return;
			
//			int termid = schoolModel.getTermID();
//			Calendar cal = Calendar.getInstance(fapp.getTimeZone());
//				cal.set(Calendar.HOUR_OF_DAY, 0);
//				cal.set(Calendar.MINUTE, 0);
//				cal.set(Calendar.SECOND, 0);
//				cal.set(Calendar.MILLISECOND, 0);
//				cal.add(Calendar.DAY_OF_MONTH, -30);
System.out.println("asofdate: " + (java.util.Date)wizard.getVal("asofdate"));
			final SchoolAccounts rep = new SchoolAccounts(fapp, str, fapp.timeZone(), -1,
				(java.util.Date)wizard.getVal("asofdate"), (Integer)wizard.getVal("latedays"));
			str.execUpdate(new UpdTasklet2() {
			public void run(SqlRun str) throws Exception {
				rep.applyLateFees(str, (Double)wizard.getVal("multiplier"));
			}});
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miApplyLateFeesActionPerformed

	private void miConfirmationLetterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miConfirmationLetterActionPerformed
	{//GEN-HEADEREND:event_miConfirmationLetterActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			Integer eid = (Integer)schoolModel.studentRm.get("entityid");
			int termid = schoolModel.getTermID();
			if (eid == null)
				JOptionPane.showMessageDialog(SchoolRegFrame.this,
					"You must have a student selected for this report!", "", JOptionPane.OK_OPTION);
			else StudentConfirmationLetter.viewReport(str, fapp, termid, eid);
		}});

// TODO add your handling code here:
	}//GEN-LAST:event_miConfirmationLetterActionPerformed

	private void miAccountStatementActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAccountStatementActionPerformed
	{//GEN-HEADEREND:event_miAccountStatementActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			int termid = schoolModel.getTermID();
//			Integer payerid = (Integer)schoolModel.termregsRm.get("payerid");
			Integer payerid = schoolModel.getPayerID();
			if (payerid == null) JOptionPane.showMessageDialog(SchoolRegFrame.this,
				"You must have a student selected for this report!", "", JOptionPane.OK_OPTION);
			else AcctStatement.doAccountStatementsAndLabels(str, fapp, termid, payerid, new java.util.Date());
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miAccountStatementActionPerformed

	private void miScheduleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miScheduleActionPerformed
	{//GEN-HEADEREND:event_miScheduleActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			Integer eid = (Integer)schoolModel.studentRm.get("entityid");
			if (eid == null) JOptionPane.showMessageDialog(SchoolRegFrame.this,
				"You must have a student selected for this report!", "", JOptionPane.OK_OPTION);
			else StudentSchedule.viewStudentSchedules(fapp, str, schoolModel.getTermID(), eid);
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miScheduleActionPerformed

	private void miStudentAccountsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStudentAccountsActionPerformed
	{//GEN-HEADEREND:event_miStudentAccountsActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			Wizard wizard = new offstage.reports.ReportWizard(fapp, SchoolRegFrame.this);
			if (wizard.runWizard("schoolaccounts")) {
				int termid = schoolModel.getTermID();
				Day asOfDay = (Day)wizard.getVal("asOfDay");
				java.util.Date asOfDate = asOfDay.toDate(Calendar.getInstance(fapp.timeZone()));
				final SchoolAccounts rep = new SchoolAccounts(fapp, str, fapp.timeZone(),
					termid, asOfDate, 30);
				str.execUpdate(new UpdTasklet2() {
				public void run(SqlRun str) throws Exception {
					Reports reports = fapp.reports(); //new OffstageReports(fapp);
					reports.viewXls(rep.model, null, "StudentAccounts.xls", 0); //schoolModel.getTermID());
				}});
			}
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miStudentAccountsActionPerformed

	private void miPayerLabelsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miPayerLabelsActionPerformed
	{//GEN-HEADEREND:event_miPayerLabelsActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask()
		{
			public void run(SqlRun str) throws Exception
			{
				int termid = schoolModel.getTermID();
				String idSql =
					" select xx.entityid\n" +
					" from (\n" +
					" 	select distinct r.entityid0 as entityid\n" +	// payerid or parent1id
					" 	from termregs tr, rels_o2m r\n" + // entities s\n" +
					" 	where tr.groupid = " + termid + "\n" +
					"   and r.entityid1 = tr.entityid\n" +
					"   and ((" +
					"		r.temporalid = tr.groupid\n" +
					"		and r.relid = (select relid from relids where name = 'payerof')\n" +
					"     ) or (\n" +
					"		r.relid = (select relid from relids where name = 'parent1of')\n" +
					"   ))\n" +

//					" 	select distinct tr.payerid as entityid\n" +
//					" 	from termregs tr,\n" + // entities s\n" +
//					" 	where tr.groupid = " + termid + "\n" +
////					" 	and tr.entityid = s.entityid\n" +
//					"          UNION\n" +
//					" 	select distinct s.parent1id as entityid\n" +
//					" 	from termregs tr, entities s\n" +
//					" 	where tr.groupid = " + termid + "\n" +
//					" 	and tr.entityid = s.entityid\n" +
					" ) xx, persons p\n" +
					" where xx.entityid = p.entityid\n" +
					" order by p.lastname, p.firstname";
				String sql = LabelReport.getSql(idSql, null);
				System.out.println("==================");
				System.out.println(sql);
				System.out.println("==================");
				str.execSql(sql, new RsTasklet2()
				{
					public void run(SqlRun str, ResultSet rs) throws Exception
					{
						Reports rr = fapp.reports();
						rr.viewJasper(rr.toJasper(rs), null, "AddressLabels.jrxml", schoolModel.getTermID());
					}});
//			st.executeUpdate(LabelReport.cleanupSql());
			}});
// TODO add your handling code here:
	}//GEN-LAST:event_miPayerLabelsActionPerformed

	private void miConfirmationLettersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miConfirmationLettersActionPerformed
	{//GEN-HEADEREND:event_miConfirmationLettersActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			int termid = schoolModel.getTermID();
			StudentConfirmationLetter.viewReport(str, fapp, termid, -1);
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miConfirmationLettersActionPerformed

	private void miAccountStatementsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAccountStatementsActionPerformed
	{//GEN-HEADEREND:event_miAccountStatementsActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask()
		{
			public void run(SqlRun str) throws Exception
			{
				int termid = schoolModel.getTermID();
				AcctStatement.doAccountStatementsAndLabels(str, fapp, termid, -1, new java.util.Date());
			}});
// TODO add your handling code here:
	}//GEN-LAST:event_miAccountStatementsActionPerformed

	private void miStudentSchedulesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStudentSchedulesActionPerformed
	{//GEN-HEADEREND:event_miStudentSchedulesActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			StudentSchedule.viewStudentSchedules(fapp, str, schoolModel.getTermID(), -1);
		}});
// TODO add your handling code here:
	}//GEN-LAST:event_miStudentSchedulesActionPerformed

	private void miRollBooksActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRollBooksActionPerformed
	{//GEN-HEADEREND:event_miRollBooksActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask()
		{
			public void run(SqlRun str) throws Exception
			{
				final RollBook report = new RollBook(fapp, schoolModel.getTermID());
				report.doSelect(str);
				str.execUpdate(new UpdTasklet2()
				{
					public void run(SqlRun str) throws Exception
					{
						JTypeTableModel model = report.newTableModel();
						JRDataSource jrdata = new JRTableModelDataSource(model);
						fapp.reports().viewJasper(
							fapp.reports().toJasper(model), null, "RollBook.jrxml", schoolModel.getTermID());
//				offstage.reports.ReportOutput.viewJasperReport(fapp, "RollBook.jrxml", jrdata, null);// TODO add your handling code here:
					}});
			}});// TODO add your handling code here:
	}//GEN-LAST:event_miRollBooksActionPerformed

	private void miRecalcAllTuitionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRecalcAllTuitionActionPerformed
	{//GEN-HEADEREND:event_miRecalcAllTuitionActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask()
		{
			public void run(SqlRun str) throws Exception
			{
				TuitionCalc tc = new TuitionCalc(fapp, schoolModel.getTermID());
					tc.setAllPayerIDs();
					tc.recalcTuition(str);
			}});
// TODO add your handling code here:
	}//GEN-LAST:event_miRecalcAllTuitionActionPerformed

	private void miSchoolEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSchoolEmailActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			EQueryWizard wizard = new EQueryWizard(fapp, SchoolRegFrame.this);
			if (!wizard.runCSEmails(str)) return;
			
			// Text of the email we wish to send
			byte[] msg = (byte[])wizard.getVal("emails");
//if (msg != null) System.out.println("Email = " + msg.subject);

			// SQL of people we wish to send to
			EQuery equery = (EQuery)wizard.getVal("equery");

			VettEmail.sendJangoMail(fapp, str, msg,
				equery.getSql((fapp.equerySchema())),
				equery.toXML(fapp.equerySchema()),
				(Integer)wizard.getVal("equeryid"), VettEmail.ET_CUSTOMER);
			
		}});
		// TODO add your handling code here:
	}//GEN-LAST:event_miSchoolEmailActionPerformed

	private void miTermSpreadsheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTermSpreadsheetActionPerformed
		fapp.guiRun().run(SchoolRegFrame.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			int termid = schoolModel.getTermID();
			String sql =
				" select e.entityid,e.firstname, e.lastname, e.dob,\n" +
				" prg.name as program, te.ncourses,\n" +
				" p1.firstname as parent1_firstname, p1.lastname as parent1_lastname\n" +
				" from persons e\n" +
				" left outer join termenrolls te on e.entityid = te.entityid\n" +
				" left outer join termregs tr on tr.entityid = te.entityid and tr.groupid = te.groupid\n" +
				" left outer join rels rels_p1 on (\n" +
				"    rels_p1.entityid1 = e.entityid\n" +
				"    and rels_p1.relid = (select relid from relids where name = 'parent1of'))\n" +
				" left outer join entities p1 on rels_p1.entityid0 = p1.entityid\n" +
				" left outer join programids prg on prg.programid = tr.programid\n" +
				" where te.groupid = " + SqlInteger.sql(termid) +
				" order by tr.programid";

			str.execSql(sql, new RsTasklet2() {
			public void run(SqlRun str, ResultSet rs) throws Exception {
				Reports rr = fapp.reports();
				rr.writeCSV(rr.format(rr.toTableModel(rs)),
					null, "Term Report");
			}});		// TODO add your handling code here:
		}});
}//GEN-LAST:event_miTermSpreadsheetActionPerformed

	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private offstage.school.gui.CourseListPanel courseListPanel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu mActions;
    private javax.swing.JMenu mHelp;
    private javax.swing.JMenu mReports;
    private javax.swing.JMenu mStudent;
    private javax.swing.JMenu mWindow;
    private javax.swing.JMenuItem miAccountStatement;
    private javax.swing.JMenuItem miAccountStatements;
    private javax.swing.JMenuItem miApplyLateFees;
    private javax.swing.JMenuItem miConfirmationLetter;
    private javax.swing.JMenuItem miConfirmationLetters;
    private javax.swing.JMenuItem miPayerLabels;
    private javax.swing.JMenuItem miRecalcAllTuition;
    private javax.swing.JMenuItem miRefresh;
    private javax.swing.JMenuItem miRollBooks;
    private javax.swing.JMenuItem miSchedule;
    private javax.swing.JMenuItem miSchoolEmail;
    private javax.swing.JMenuItem miStudentAccounts;
    private javax.swing.JMenuItem miStudentSchedules;
    private javax.swing.JMenuItem miTermSpreadsheet;
    private offstage.school.gui.RegistrationPanel regPanel;
    private javax.swing.JTabbedPane tabs;
    private offstage.openclass.TeacherPanel teacherPanel1;
    private citibob.swing.typed.JKeyedComboBox vTermID;
    // End of variables declaration//GEN-END:variables

public static void showFrame(SqlRun str, final FrontApp fapp)
{
	final SchoolRegFrame frame = new SchoolRegFrame();
	frame.initRuntime(str, fapp);
	str.execUpdate(new UpdTasklet2() {
	public void run(SqlRun str) throws Exception {
		frame.setVisible(true);
	}});
}

	
}
