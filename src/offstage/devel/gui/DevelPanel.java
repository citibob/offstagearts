/*
OffstageArts: Enterprise Database for Arts Organizations
This file Copyright (c) 2005-2008 by Robert Fischer

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * EditorPanel.java
 *
 * Created on June 5, 2005, 10:33 AM
 */

package offstage.devel.gui;

import citibob.jschema.SchemaBuf;
import javax.swing.*;
//import citibob.jschema.swing.JSchemaWidgetTree;
import offstage.FrontApp;
import citibob.task.*;
import citibob.sql.*;
import citibob.swing.WidgetTree;
import java.beans.PropertyChangeListener;
import offstage.cleanse.MergeDialog;
import offstage.reports.SummaryReport;
import offstage.swing.typed.EntitySelector;
import offstage.swing.typed.IdSqlTable.PopupListener;

/**
 *
 * @author  citibob
 */
public class DevelPanel extends javax.swing.JPanel {

DevelModel dmod;
FrontApp app;

public EntitySelector getEntitySelector() { return entitySelector; }

	/** Creates new form EditorPanel */
	public DevelPanel() {
		initComponents();
		summaryPane.setContentType("text/html");
		summaryPane.setEditable(false);
	}
	public void initRuntime(SqlRun str, FrontApp fapp, DevelModel xdmod)
	{
		this.app = fapp;
		this.dmod = xdmod;
		entityPanel.initRuntime(app.sqlRun(), fapp, dmod);
		entitySelector.initRuntime(app, -1, new String[] {"Merge with %"},
		new PopupListener() {
		public void onMenuSelected(int menuIndex, String menuString, int entityID) {
			MergeDialog mdialog = new MergeDialog(app.sqlRun(), app,
				WidgetTree.getJFrame(DevelPanel.this));
			mdialog.setEntityIDs(app.sqlRun(), dmod.getEntityId(), entityID);
			mdialog.setVisible(true);
			Integer mergedID = mdialog.getMergedID();
			if (mergedID != null) {
				dmod.setKey(mergedID);
				refresh(app.sqlRun());
			}
			app.sqlRun().flush();
//			System.out.println("Merge selected!!!!! menuIndex=" + menuIndex + ", entityID = " + entityID);
		}});

		
		
		entitySelector.setAutoSelectOnOne(true);
		entitySelector.addPropertyChangeListener(new PropertyChangeListener() {
		public void propertyChange(final java.beans.PropertyChangeEvent evt) {
			Integer EntityID = (Integer)evt.getNewValue();
			if (EntityID == null) return;
						
			dmod.setKey(EntityID);
			refresh(app.sqlRun());
		}});
	}
	
	void refresh(SqlRun str)
	{
		dmod.doSelect(str);
		str.execUpdate(new UpdTasklet() {
		public void run() throws Exception {
			SummaryReport sr = new SummaryReport(app);
			String html = sr.getHtml((DevelModel)dmod);
			summaryPane.setText(html);
			summaryPane.setCaretPosition(0);
		}});
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        bSave = new javax.swing.JButton();
        bUndo = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bNewPerson = new javax.swing.JButton();
        bNewOrg = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        entityPanel = new offstage.devel.gui.EntityPanel();
        summaryScroll = new javax.swing.JScrollPane();
        summaryPane = new javax.swing.JTextPane();
        entitySelector = new offstage.swing.typed.EntitySelector();

        setLayout(new java.awt.BorderLayout());

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(bSave);

        bUndo.setText("Undo");
        bUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUndoActionPerformed(evt);
            }
        });
        jToolBar1.add(bUndo);

        bDelete.setText("Delete");
        bDelete.setEnabled(false);
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(bDelete);

        bNewPerson.setText("New Person");
        bNewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewPersonActionPerformed(evt);
            }
        });
        jToolBar1.add(bNewPerson);

        bNewOrg.setText("New Org");
        bNewOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewOrgActionPerformed(evt);
            }
        });
        jToolBar1.add(bNewOrg);

        add(jToolBar1, java.awt.BorderLayout.SOUTH);

        entityPanel.setPreferredSize(new java.awt.Dimension(550, 586));
        jTabbedPane1.addTab("Edit", entityPanel);

        summaryScroll.setViewportView(summaryPane);

        jTabbedPane1.addTab("Summary", summaryScroll);

        jSplitPane1.setLeftComponent(jTabbedPane1);
        jSplitPane1.setRightComponent(entitySelector);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private void bNewOrgActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bNewOrgActionPerformed
	{//GEN-HEADEREND:event_bNewOrgActionPerformed
	app.guiRun().run(this, new SqlTask() {
	public void run(SqlRun str) throws Exception {
//		model.newEntity(st, FullEntityDbModel.PERSON);
		JFrame root = (javax.swing.JFrame)citibob.swing.WidgetTree.getRoot(DevelPanel.this);
		citibob.wizard.Wizard wizard = new offstage.wizards.newrecord.NewPersonWizard(app, root);
		wizard.runWizard("org");
		Integer EntityID = (Integer)wizard.getVal("entityid");
		if (EntityID != null) {
			offstage.devel.gui.DevelPanel.this.dmod.setKey(EntityID);
			refresh(str);
		}
	}});// TODO add your handling code here:
	}//GEN-LAST:event_bNewOrgActionPerformed

	private void bUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUndoActionPerformed
	app.guiRun().run(this, new SqlTask() {
	public void run(SqlRun str) throws Exception {
		refresh(str);
	}});
	}//GEN-LAST:event_bUndoActionPerformed

private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
	app.guiRun().run(this, new Job("admin", new SqlTask() {
	public void run(SqlRun str) throws Exception {
		if (JOptionPane.showConfirmDialog(DevelPanel.this,
			"Are you sure you wish to permanently delete this record?",
			"Delete Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
				offstage.devel.gui.DevelPanel.this.dmod.doDelete(str);
				// Stop displaying it
				offstage.devel.gui.DevelPanel.this.dmod.setKey(-1);
				refresh(str);
		}
//		this.simpleSearch.runSearch();
	}}));
}//GEN-LAST:event_bDeleteActionPerformed

private void bNewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewPersonActionPerformed
	app.guiRun().run(this, new SqlTask() {
	public void run(SqlRun str) throws Exception {
//		model.newEntity(st, FullEntityDbModel.PERSON);
		JFrame root = (javax.swing.JFrame)citibob.swing.WidgetTree.getRoot(DevelPanel.this);
		citibob.wizard.Wizard wizard = new offstage.wizards.newrecord.NewPersonWizard(app, root);
		wizard.runWizard("person");
		Integer EntityID = (Integer)wizard.getVal("entityid");
		if (EntityID != null) {
			offstage.devel.gui.DevelPanel.this.dmod.setKey(EntityID);
			refresh(str);
		}
	}});
}//GEN-LAST:event_bNewPersonActionPerformed

private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
	app.guiRun().run(this, new SqlTask() {
	public void run(SqlRun str) throws Exception {
//		if (dmod.onePerson.inEtap()) {
//		    JOptionPane.showMessageDialog(offstage.devel.gui.DevelPanel.this,
//				"Cannot edit records that are in eTapestry", "Error",
//				JOptionPane.ERROR_MESSAGE);
//		} else {
			offstage.devel.gui.DevelPanel.this.dmod.doUpdate(str);
			refresh(str);
//		}
	}});
}//GEN-LAST:event_bSaveActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bNewOrg;
    private javax.swing.JButton bNewPerson;
    private javax.swing.JButton bSave;
    private javax.swing.JButton bUndo;
    private offstage.devel.gui.EntityPanel entityPanel;
    private offstage.swing.typed.EntitySelector entitySelector;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextPane summaryPane;
    private javax.swing.JScrollPane summaryScroll;
    // End of variables declaration//GEN-END:variables

//	public static void main(String[] args) throws Exception
//    {
//
//
//		FrontApp app = new FrontApp();
//		FullEntityDbModel dm = app.getFullEntityDm();
//		//SqlRun str = app.createStatement();
//		SqlRun str = app.getPool().checkout().createStatement();
//
//		dm.setKey(139208);
//		dm.doSelect(st);
//
//		EditorPanel personPanel = new EditorPanel();
//		personPanel.initRuntime(new SimpleDbActionRunner(app.getPool()), app);//personRM, dm.getPhonesSb());
//
//		
//		
//	    JFrame frame = new JFrame();
//	    frame.getContentPane().add(personPanel);
//		frame.pack();
//	    frame.setVisible(true);
//		System.out.println("Done");
//    }

}
